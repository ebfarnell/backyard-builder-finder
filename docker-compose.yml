version: '3.8'

services:
  # PostgreSQL with PostGIS
  db:
    image: postgis/postgis:15-3.3
    container_name: bbf-db
    environment:
      POSTGRES_DB: bbf_dev
      POSTGRES_USER: bbf_dev
      POSTGRES_PASSWORD: bbf_dev
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./ops/sql/init.sql:/docker-entrypoint-initdb.d/01-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bbf_dev -d bbf_dev"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: bbf-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # FastAPI backend
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: development
    container_name: bbf-api
    environment:
      DATABASE_URL: postgresql://bbf_dev:bbf_dev@db:5432/bbf_dev
      REDIS_URL: redis://redis:6379/0
      ENVIRONMENT: development
      DEBUG: "true"
      JWT_SECRET: dev-jwt-secret-change-in-production
      CORS_ORIGINS: http://localhost:3000,http://localhost:3001
    ports:
      - "8000:8000"
    volumes:
      - ./apps/api:/app
      - ./packages/shared:/shared
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js frontend
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: development
    container_name: bbf-web
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: dev-nextauth-secret-change-in-production
      DATABASE_URL: postgresql://bbf_dev:bbf_dev@db:5432/bbf_dev
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web:/app
      - ./packages/shared:/shared
      - /app/node_modules
      - /app/.next
    depends_on:
      - api
      - db
    command: ["npm", "run", "dev"]

  # MinIO for local S3-compatible storage (optional)
  minio:
    image: minio/minio:latest
    container_name: bbf-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  default:
    name: bbf-network