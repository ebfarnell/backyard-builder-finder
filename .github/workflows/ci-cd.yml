name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  AWS_REGION: us-west-2
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ========================
  # CODE QUALITY & TESTING
  # ========================
  
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_DB: bbf_test
          POSTGRES_USER: bbf_test
          POSTGRES_PASSWORD: bbf_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install pnpm
        run: corepack enable && corepack prepare pnpm@latest --activate
        
      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          pip install -r apps/api/requirements.txt
          pip install -r apps/api/requirements-dev.txt
          
      - name: Lint TypeScript
        run: pnpm run lint
        
      - name: Type check
        run: pnpm run typecheck
        
      - name: Lint Python
        run: |
          cd apps/api
          black --check .
          isort --check-only .
          flake8 .
          mypy .
          
      - name: Test shared package
        run: |
          cd packages/shared
          pnpm test
          
      - name: Test API
        env:
          DATABASE_URL: postgresql://bbf_test:bbf_test@localhost:5432/bbf_test
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET: test-secret
        run: |
          cd apps/api
          pytest --cov=. --cov-report=xml
          
      - name: Test Frontend
        run: |
          cd apps/web
          pnpm test
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./apps/api

  # ========================
  # SECURITY SCANNING
  # ========================
  
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # ========================
  # BUILD DOCKER IMAGES
  # ========================
  
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      web-image: ${{ steps.meta-web.outputs.tags }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Extract metadata for API
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/bbf-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Extract metadata for Web
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/bbf-web
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/api/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/web/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ========================
  # TERRAFORM PLAN
  # ========================
  
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Terraform Init
        working-directory: ./infra
        run: terraform init
        
      - name: Terraform Plan
        working-directory: ./infra
        run: |
          terraform plan \
            -var="db_master_password=${{ secrets.DB_MASTER_PASSWORD }}" \
            -out=tfplan
            
      - name: Comment PR with plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            // Add logic to comment on PR with Terraform plan output

  # ========================
  # DEPLOY TO STAGING
  # ========================
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Deploy infrastructure
        working-directory: ./infra
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="environment=staging" \
            -var="db_master_password=${{ secrets.DB_MASTER_PASSWORD }}"
            
      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster bbf-staging-cluster \
            --service bbf-staging-api \
            --force-new-deployment

  # ========================
  # DEPLOY TO PRODUCTION
  # ========================
  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Deploy infrastructure
        working-directory: ./infra
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="environment=prod" \
            -var="db_master_password=${{ secrets.DB_MASTER_PASSWORD }}" \
            -var="enable_deletion_protection=true" \
            -var="log_retention_days=90"
            
      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster bbf-prod-cluster \
            --service bbf-prod-api \
            --force-new-deployment
            
      - name: Run database migrations
        run: |
          # Add migration logic here
          echo "Running database migrations..."
          
      - name: Validate deployment
        run: |
          # Add health check validation
          echo "Validating deployment..."